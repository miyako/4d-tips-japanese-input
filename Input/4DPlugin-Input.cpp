/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Input.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Input
 #	author : miyako
 #	2023/08/01
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Input.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- Input
            
			case 1 :
				INPUT_SET_JAPANESE(params);
				break;

        }

	}
	catch(...)
	{

	}
}

static void _keycode_api() {
    
    CGKeyCode keycode = kVK_JIS_Kana;
    
    CGEventRef e;
        
    CGEventSourceRef eventSource = CGEventSourceCreate(kCGEventSourceStateHIDSystemState);
    CGEventFlags eventFlags = 0;
    
    e = CGEventCreateKeyboardEvent (eventSource, keycode, true);
    CGEventSetFlags(e, eventFlags );
    CGEventPost(kCGHIDEventTap, e);
    CFRelease(e);
       
    e = CGEventCreateKeyboardEvent (eventSource, keycode, false);
    CGEventSetFlags(e, eventFlags );
    CGEventPost(kCGHIDEventTap, e);
    CFRelease(e);
    
    CFRelease(eventSource);
}

static void _carbon_api() {
    
    TISInputSourceRef source = TISCopyInputSourceForLanguage(CFSTR("ja-JP"));
    if(source) {
        /*
         *      If there is more than one such input source
         *      and at least one has previously been used, then the
         *      most-recently-used one will be chosen
         */
        TISSelectInputSource(source);
        CFRelease(source);
    }
    
}

#pragma mark -

void INPUT_SET_JAPANESE(PA_PluginParameters params) {

    api_mode_t mode = (api_mode_t)PA_GetLongParameter(params, 1);
    
    switch (mode) {
        case api_mode_carbon:
            PA_RunInMainProcess((PA_RunInMainProcessProcPtr)_carbon_api, NULL);
            break;
        case api_mode_kana:
            _keycode_api();
            break;
        default:
            break;
    }
    
}

